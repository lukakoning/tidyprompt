[{"path":"https://lukakoning.github.io/tidyprompt/articles/example_usage.html","id":"setup-an-llm-provider","dir":"Articles","previous_headings":"","what":"Setup an LLM provider","title":"Example usage","text":"tidyprompt can used LLM provider capable completing chat. moment, tidyprompt includes pre-built functions connect Ollama OpenAI API. create_llm_provider function, can easily write hook LLM provider. make API calls using httr package use another R package already hook LLM provider want use.","code":"# Ollama running on local PC ollama <- create_ollama_llm_provider(   parameters = list(model = \"llama3.1:8b\", url = \"http://localhost:11434/api/chat\") )  # OpenAI API openai <- create_openai_llm_provider(   parameters = list(model = \"gpt-4o-mini\", api_key = Sys.getenv(\"OPENAI_API_KEY\")) )  # Create your own LLM provider hook using create_llm_provider();  #   see ?create_llm_provider for more information, and take a look at #   the source code of create_ollama_llm_provider() and create_openai_llm_provider()"},{"path":"https://lukakoning.github.io/tidyprompt/articles/example_usage.html","id":"basic-prompting","dir":"Articles","previous_headings":"","what":"Basic prompting","title":"Example usage","text":"simple string serves base prompt. adding prompt wrappers, can influence various aspects LLM handles prompt, verifying output structured valid (including retries feedback LLM ). add_text simple example prompt wrapper. simply adds text end base prompt. can also construct final prompt text, without sending LLM provider.","code":"\"Hi there!\" |>     send_prompt(ollama) #> [1] \"How's your day going so far? Is there something I can help you with or would you like to chat?\" \"Hi there!\" |>     add_text(\"What is a large language model? Explain in 10 words.\") |>     send_prompt(ollama) #> [1] \"Complex software that understands and generates human-like written text effectively.\" \"Hi there!\" |>     add_text(\"What is a large language model? Explain in 10 words.\") |>     construct_prompt_text() |>     cat() #> Hi there! #>  #> What is a large language model? Explain in 10 words."},{"path":"https://lukakoning.github.io/tidyprompt/articles/example_usage.html","id":"retrieving-output-in-a-specific-format","dir":"Articles","previous_headings":"","what":"Retrieving output in a specific format","title":"Example usage","text":"Using prompt wrappers, can force LLM return output specific format. can also extract output turn character another data type. instance, answer_as_integer prompt wrapper force LLM return integer. achieve , prompt wrapper add text base prompt, asking LLM reply integer. However, prompt wrapper : also attempt extract validate integer LLM’s response. extraction validation fails, feedback sent back LLM, LLM can retry answering prompt. example prompt initially fail, succeed retry.","code":"\"What is 2 + 2?\" |>     answer_as_integer() |>     send_prompt(ollama, verbose = TRUE) #> --- Sending message to LLM-provider: --- #> What is 2 + 2? #>  #> You must answer with only an integer (use no other characters). #> --- Received response from LLM-provider: --- #> 4 #> [1] 4 \"What is 2 + 2?\" |>     add_text(\"Please write out your reply in words, use no numbers.\") |>     answer_as_integer(add_instruction_to_prompt = FALSE) |>     send_prompt(ollama, verbose = TRUE) #> --- Sending message to LLM-provider: --- #> What is 2 + 2? #>  #> Please write out your reply in words, use no numbers. #> --- Received response from LLM-provider: --- #> Two plus two equals four. #> --- Sending message to LLM-provider: --- #> You must answer with only an integer (use no other characters). #> --- Received response from LLM-provider: --- #> 4 #> [1] 4"},{"path":"https://lukakoning.github.io/tidyprompt/articles/example_usage.html","id":"adding-a-reasoning-mode-to-the-llm","dir":"Articles","previous_headings":"","what":"Adding a reasoning mode to the LLM","title":"Example usage","text":"Prompt wrappers may also used add reasoning mode LLM. hypothesized improve LLM’s performance complex tasks. instance, function answer_by_chain_of_thought add chain thought reasoning mode LLM. wraps base prompt within request LLM reason step step, asking provide final answer within ‘FINISH[]’. extraction function ensures final answer returned.","code":"\"What is 2 + 2?\" |>     answer_by_chain_of_thought() |>     answer_as_integer() |>     send_prompt(ollama, verbose = TRUE) #> --- Sending message to LLM-provider: --- #> You are given a user's prompt. #> To answer the user's prompt, you need to think step by step to arrive at a final answer. #>  #> ----- START OF USER'S PROMPT ----- #> What is 2 + 2? #>  #> You must answer with only an integer (use no other characters). #> ----- END OF USER'S PROMPT ----- #>  #> What are the steps you would take to answer the user's prompt? #> Describe your thought process in the following format: #>   >> step 1: <step 1 description> #>   >> step 2: <step 2 description> #>   (etc.) #>  #> When you are done, you must type: #> FINISH[<put here your final answer to the user's prompt>] #>  #> Make sure your final answer follows the logical conclusion of your thought process. #> --- Received response from LLM-provider: --- #> >> step 1: Identify the operation being asked in the prompt, which is addition. #> The prompt asks for the result of \"2 + 2\", indicating that we need to add two numbers together. #>  #> >> step 2: Determine the two numbers being added, which are both 2. #> The prompt clearly states that we have two instances of the number 2 that need to be combined using addition. #>  #> >> step 3: Perform the arithmetic operation by adding the two numbers together. #> Since both numbers are 2, adding them results in doubling the value of one number to get the other. In this case, doubling 2 gives us 4. #>  #> >> step 4: Convert the result into an integer answer as per the prompt's instruction. #> Given that we've arrived at a result of 4 through arithmetic, and considering the instruction to provide only an integer answer, our response should be the number 4. #>  #> FINISH[4] #> [1] 4"},{"path":"https://lukakoning.github.io/tidyprompt/articles/example_usage.html","id":"giving-tools-to-the-llm-autonomous-function-calling","dir":"Articles","previous_headings":"","what":"Giving tools to the LLM (autonomous function-calling)","title":"Example usage","text":"tidyprompt, can define R functions give LLM ability call . enables LLM retrieve additional information take actions.","code":"# Define a function that returns fake data about the temperature in a location   temperature_in_location <- function(     location = c(\"Amsterdam\", \"Utrecht\", \"Enschede\"),     unit = c(\"Celcius\", \"Fahrenheit\")   ) {     #' llm_tool::name temperature_in_location     #'     #' llm_tool::description Get the temperature in a location     #'     #' llm_tool::param location Location, must be one of: \"Amsterdam\", \"Utrecht\", \"Enschede\"     #' llm_tool::param unit Unit, must be one of: \"Celcius\", \"Fahrenheit\"     #'     #' llm_tool::return The temperature in the specified location and unit     #'     #' llm_tool::example     #' temperature_in_location(\"Amsterdam\", \"Fahrenheit\")          # As shown above, one can use docstring-like text to document the function.     #   This will provide the LLM information on what the function does,     #   and how it should be used.          location <- match.arg(location)     unit <- match.arg(unit)      temperature_celcius <- switch(       location,       \"Amsterdam\" = 32.5,       \"Utrecht\" = 19.8,       \"Enschede\" = 22.7     )      if (unit == \"Celcius\") {       return(temperature_celcius)     } else {       return(temperature_celcius * 9/5 + 32)     }   }    # Ask the LLM a question which can be answered with the function   \"Hi, what is the weather temperature in Enschede?\" |>     add_text(\"I want to know the Celcius degrees.\") |>     answer_as_integer() |>     add_tools(temperature_in_location) |>     send_prompt(ollama, verbose = TRUE) #> --- Sending message to LLM-provider: --- #> Hi, what is the weather temperature in Enschede? #>  #> I want to know the Celcius degrees. #>  #> You must answer with only an integer (use no other characters). #>  #> If you need more information, you can call functions to help you. #> To call a function, type: #>   FUNCTION[<function name here>](<argument 1>, <argument 2>, etc...) #>  #> The following functions are available: #>  #> function name: temperature_in_location #> description: Get the temperature in a location #> arguments: #>     - location: Location, must be one of: \"Amsterdam\", \"Utrecht\", \"Enschede\" #>     - unit: Unit, must be one of: \"Celcius\", \"Fahrenheit\" #> return value: The temperature in the specified location and unit #> example usage: FUNCTION[temperature_in_location](\"Amsterdam\", \"Fahrenheit\") #>  #> After you call a function, wait until you receive more information. #> --- Received response from LLM-provider: --- #> To get the current temperature in Enschede, I'll use the `temperature_in_location` function. #>  #> FUNCTION[temperature_in_location](\"Enschede\", \"Celcius\")  #>  #> Please wait for 2 seconds... #> --- Sending message to LLM-provider: --- #> function called: temperature_in_location #> arguments used: Enschede, Celcius #> result: 22.7 #> --- Received response from LLM-provider: --- #> The current temperature in Enschede is **22**. #> --- Sending message to LLM-provider: --- #> You must answer with only an integer (use no other characters). #> --- Received response from LLM-provider: --- #> 22 #> [1] 22"},{"path":"https://lukakoning.github.io/tidyprompt/articles/example_usage.html","id":"creating-your-own-prompt-wrappers","dir":"Articles","previous_headings":"","what":"Creating your own prompt wrappers","title":"Example usage","text":"hood, prompts just lists base prompt (string) series prompt wrappers. can thus create function takes prompt appends new prompt wrapper . Take look source code function add_text: complex prompt wrappers may also add extraction validation functions. Take look source code function answer_as_integer: key difference extraction validation function extraction function alters LLM’s response passes altered response next extraction /validation functions, eventually return statement send_prompt (extractions validations succesful). validation function, hand, checks LLM’s response passes logical test. extraction validation functions can return feedback LLM. information, can prompt wrappers, see documentation prompt_wrap class creator function: create_prompt_wrap. examples prompt wrapper functions, see, instance documentation source code add_text, answer_as_integer, answer_by_chain_of_thought, add_tools.","code":"add_text <- function(     prompt,     text, position = c(\"after\", \"before\"), sep = \"\\n\\n\" ) {   position <- match.arg(position)    modify_fn <- function(original_prompt_text) {     if (position == \"after\") {       paste(original_prompt_text, text, sep = sep)     } else {       paste(text, original_prompt_text, sep = sep)     }   }    new_wrap <- prompt_wrap(     modify_fn = modify_fn   )    append_prompt_wrap(prompt, new_wrap) } answer_as_integer <- function(     prompt,     min = NULL,     max = NULL,     add_instruction_to_prompt = TRUE ) {   instruction <- \"You must answer with only an integer (use no other characters).\"    if (!is.null(min) && !is.null(max)) {     instruction <- paste(instruction, glue::glue(\"Enter an integer between {min} and {max}.\"))   } else if (!is.null(min)) {     instruction <- paste(instruction, glue::glue(\"Enter an integer greater than or equal to {min}.\"))   } else if (!is.null(max)) {     instruction <- paste(instruction, glue::glue(\"Enter an integer less than or equal to {max}.\"))   }     # Define modification/extraction/validation functions:   modify_fn <- function(original_prompt_text) {     if (!add_instruction_to_prompt) {       return(original_prompt_text)     }      glue::glue(\"{original_prompt_text}\\n\\n{instruction}\")   }    extraction_fn <- function(x) {     extracted <- suppressWarnings(as.integer(x))     if (is.na(extracted)) {       return(create_llm_feedback(instruction))     }     return(extracted)   }    validation_fn <- function(x) {     if (!is.null(min) && x < min) {       return(create_llm_feedback(glue::glue(         \"The number should be greater than or equal to {min}.\"       )))     }     if (!is.null(max) && x > max) {       return(create_llm_feedback(glue::glue(         \"The number should be less than or equal to {max}.\"       )))     }     return(TRUE)   }    new_wrap <- prompt_wrap(     modify_fn = modify_fn,     extraction_functions = list(extraction_fn),     validation_functions = list(validation_fn)   )    append_prompt_wrap(prompt, new_wrap) }"},{"path":"https://lukakoning.github.io/tidyprompt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luka Koning. Author, maintainer, copyright holder. Tjark Van de Merwe. Author, copyright holder.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koning L, Van de Merwe T (2024). tidyprompt: Prompt empower LLM, tidy way. R package version 0.0.0.9000, https://tjarkvandemerwe.github.io/tidyprompt/, https://lukakoning.github.io/tidyprompt/, https://github.com/tjarkvandemerwe/tidyprompt.","code":"@Manual{,   title = {tidyprompt: Prompt and empower your LLM, the tidy way},   author = {Luka Koning and Tjark {Van de Merwe}},   year = {2024},   note = {R package version 0.0.0.9000, https://tjarkvandemerwe.github.io/tidyprompt/, https://lukakoning.github.io/tidyprompt/},   url = {https://github.com/tjarkvandemerwe/tidyprompt}, }"},{"path":"https://lukakoning.github.io/tidyprompt/index.html","id":"tidyprompt","dir":"","previous_headings":"","what":"Prompt and empower your LLM, the tidy way","title":"Prompt and empower your LLM, the tidy way","text":"tidyprompt R package prompt empower large language models (LLMs), tidy way. Key features tidyprompt : tidy prompting: Quickly elegantly construct prompts LLMs, using piping syntax (inspired tidyverse). Wrap base prompt prompt wrappers influence LLM handles prompt. library pre-built prompt wrappers included, can also write . structured output: Extract structured output LLM’s response, validate . Automatic retries feedback LLM, output expected. reasoning modes: Make LLM answer specific mode, chain--thought ReAct (Reasoning Acting) modes. function calling: Give LLM ability autonomously call R functions (‘tools’). , LLM can retrieve information take actions. compatible LLM providers: Usable LLM provider supports chat completion. Use included LLM providers Ollama (local PC server) OpenAI API. easily write hook LLM provider.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prompt and empower your LLM, the tidy way","text":"can install development version tidyprompt GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"tjarkvandemerwe/tidyprompt\")"},{"path":"https://lukakoning.github.io/tidyprompt/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Prompt and empower your LLM, the tidy way","text":"","code":"library(tidyprompt)"},{"path":"https://lukakoning.github.io/tidyprompt/index.html","id":"setup-an-llm-provider","dir":"","previous_headings":"Example usage","what":"Setup an LLM provider","title":"Prompt and empower your LLM, the tidy way","text":"tidyprompt can used LLM provider capable completing chat. moment, tidyprompt includes pre-built functions connect Ollama OpenAI API. create_llm_provider function, can easily write hook LLM provider. make API calls using httr package use another R package already hook LLM provider want use.","code":"# Ollama running on local PC ollama <- create_ollama_llm_provider(   parameters = list(model = \"llama3.1:8b\", url = \"http://localhost:11434/api/chat\") )  # OpenAI API openai <- create_openai_llm_provider(   parameters = list(model = \"gpt-4o-mini\", api_key = Sys.getenv(\"OPENAI_API_KEY\")) )  # Create your own LLM provider hook using create_llm_provider();  #   see ?create_llm_provider for more information, and take a look at #   the source code of create_ollama_llm_provider() and create_openai_llm_provider()"},{"path":"https://lukakoning.github.io/tidyprompt/index.html","id":"basic-prompting","dir":"","previous_headings":"Example usage","what":"Basic prompting","title":"Prompt and empower your LLM, the tidy way","text":"simple string serves base prompt. adding prompt wrappers, can influence various aspects LLM handles prompt, verifying output structured valid (including retries feedback LLM ). add_text simple example prompt wrapper. simply adds text end base prompt. can also construct final prompt text, without sending LLM provider.","code":"\"Hi there!\" |>     send_prompt(ollama) #> [1] \"It's nice to meet you. Is there something I can help you with or would you like to chat?\" \"Hi there!\" |>     add_text(\"What is a large language model? Explain in 10 words.\") |>     send_prompt(ollama) #> [1] \"Complex computer program trained on vast texts to generate human-like responses.\" \"Hi there!\" |>     add_text(\"What is a large language model? Explain in 10 words.\") |>     construct_prompt_text() |>     cat() #> Hi there! #>  #> What is a large language model? Explain in 10 words."},{"path":"https://lukakoning.github.io/tidyprompt/index.html","id":"retrieving-output-in-a-specific-format","dir":"","previous_headings":"Example usage","what":"Retrieving output in a specific format","title":"Prompt and empower your LLM, the tidy way","text":"Using prompt wrappers, can force LLM return output specific format. can also extract output turn character another data type. instance, answer_as_integer prompt wrapper force LLM return integer. achieve , prompt wrapper add text base prompt, asking LLM reply integer. However, prompt wrapper : also attempt extract validate integer LLM’s response. extraction validation fails, feedback sent back LLM, LLM can retry answering prompt. example prompt initially fail, succeed retry.","code":"\"What is 2 + 2?\" |>     answer_as_integer(add_instruction_to_prompt = TRUE) |>     send_prompt(ollama, verbose = TRUE) #> --- Sending message to LLM-provider: --- #> What is 2 + 2? #>  #> You must answer with only an integer (use no other characters). #> --- Received response from LLM-provider: --- #> 4 #> [1] 4 \"What is 2 + 2?\" |>     add_text(\"Please write out your reply in words, use no numbers.\") |>     answer_as_integer(add_instruction_to_prompt = FALSE) |>     send_prompt(ollama, verbose = TRUE) #> --- Sending message to LLM-provider: --- #> What is 2 + 2? #>  #> Please write out your reply in words, use no numbers. #> --- Received response from LLM-provider: --- #> Four. #> --- Sending message to LLM-provider: --- #> You must answer with only an integer (use no other characters). #> --- Received response from LLM-provider: --- #> 4 #> [1] 4"},{"path":"https://lukakoning.github.io/tidyprompt/index.html","id":"adding-a-reasoning-mode-to-the-llm","dir":"","previous_headings":"Example usage","what":"Adding a reasoning mode to the LLM","title":"Prompt and empower your LLM, the tidy way","text":"Prompt wrappers may also used add reasoning mode LLM. hypothesized improve LLM’s performance complex tasks. instance, function set_mode_chainofthought add chain thought reasoning mode LLM. wraps base prompt within request LLM reason step step, asking provide final answer within ‘FINISH[]’. extraction function ensures final answer returned.","code":"\"What is 2 + 2?\" |>     set_mode_chainofthought() |>     answer_as_integer() |>     send_prompt(ollama, verbose = TRUE) #> --- Sending message to LLM-provider: --- #> You are given a user's prompt. #> To answer the user's prompt, you need to think step by step to arrive at a final answer. #>  #> ----- START OF USER'S PROMPT ----- #> What is 2 + 2? #> ----- END OF USER'S PROMPT ----- #>  #> What are the steps you would take to answer the user's prompt? #> Describe your thought process in the following format: #>   >> step 1: <step 1 description> #>   >> step 2: <step 2 description> #>   (etc.) #>  #> When you are done, you must type: #> FINISH[<put here your final answer to the user's prompt>] #>  #> Make sure your final answer follows the logical conclusion of your thought process. #> --- Received response from LLM-provider: --- #> >> step 1: Identify the mathematical operation in the prompt, which is a simple addition problem. #>  #> >> step 2: Recall the basic arithmetic fact that 2 + 2 equals a specific numerical value. #>  #> >> step 3: Apply this knowledge to determine the result of the addition problem, using the known facts about numbers and their operations. #>  #> >> step 4: Conclude that based on this mathematical understanding, the solution to the prompt \"What is 2 + 2?\" is a fixed numerical quantity. #>  #> FINISH[4] #> [1] 4"},{"path":"https://lukakoning.github.io/tidyprompt/index.html","id":"giving-tools-to-the-llm-autonomous-function-calling","dir":"","previous_headings":"Example usage","what":"Giving tools to the LLM (autonomous function-calling)","title":"Prompt and empower your LLM, the tidy way","text":"tidyprompt, can define R functions give LLM ability call . enables LLM retrieve additional information take actions.","code":"# Define a function that returns fake data about the temperature in a location   temperature_in_location <- function(     location = c(\"Amsterdam\", \"Utrecht\", \"Enschede\"),     unit = c(\"Celcius\", \"Fahrenheit\")   ) {     #' llm_tool::name temperature_in_location     #'     #' llm_tool::description Get the temperature in a location     #'     #' llm_tool::param location Location, must be one of: \"Amsterdam\", \"Utrecht\", \"Enschede\"     #' llm_tool::param unit Unit, must be one of: \"Celcius\", \"Fahrenheit\"     #'     #' llm_tool::return The temperature in the specified location and unit     #'     #' llm_tool::example     #' temperature_in_location(\"Amsterdam\", \"Fahrenheit\")          # As shown above, one can use docstring-like text to document the function.     #   This will provide the LLM information on what the function does,     #   and how it should be used.          location <- match.arg(location)     unit <- match.arg(unit)      temperature_celcius <- switch(       location,       \"Amsterdam\" = 32.5,       \"Utrecht\" = 19.8,       \"Enschede\" = 22.7     )      if (unit == \"Celcius\") {       return(temperature_celcius)     } else {       return(temperature_celcius * 9/5 + 32)     }   }    # Ask the LLM a question which can be answered with the function   \"Hi, what is the weather temperature in Enschede?\" |>     add_text(\"I want to know the Celcius degrees.\") |>     answer_as_integer() |>     add_tools(temperature_in_location) |>     send_prompt(ollama, verbose = TRUE) #> --- Sending message to LLM-provider: --- #> Hi, what is the weather temperature in Enschede? #>  #> I want to know the Celcius degrees. #>  #> If you need more information, you can call functions to help you. #> To call a function, type: #>   FUNCTION[<function name here>](<argument 1>, <argument 2>, etc...) #>  #> The following functions are available: #>  #> function name: temperature_in_location #> description: Get the temperature in a location #> arguments: #>     - location: Location, must be one of: \"Amsterdam\", \"Utrecht\", \"Enschede\" #>     - unit: Unit, must be one of: \"Celcius\", \"Fahrenheit\" #> return value: The temperature in the specified location and unit #> example usage: FUNCTION[temperature_in_location](\"Amsterdam\", \"Fahrenheit\") #>  #> After you call a function, wait until you receive more information. #> --- Received response from LLM-provider: --- #> I'll use the provided function to get the current temperature in Enschede. #>  #> FUNCTION[temperature_in_location](\"Enschede\", \"Celcius\") #> --- Sending message to LLM-provider: --- #> function called: temperature_in_location #> arguments used: Enschede, Celcius #> result: 22.7 #> --- Received response from LLM-provider: --- #> So the current temperature in Enschede is 22.7 degrees Celsius. #> --- Sending message to LLM-provider: --- #> You must answer with only an integer (use no other characters). #> --- Received response from LLM-provider: --- #> 22 #> [1] 22"},{"path":"https://lukakoning.github.io/tidyprompt/index.html","id":"creating-your-own-prompt-wrappers","dir":"","previous_headings":"Example usage","what":"Creating your own prompt wrappers","title":"Prompt and empower your LLM, the tidy way","text":"hood, prompts just lists base prompt (string) series prompt wrappers. can thus create function takes prompt appends new prompt wrapper . Take look source code function add_text: complex prompt wrappers may also add extraction validation functions. Take look source code function answer_as_integer: key difference extraction validation function extraction function alters LLM’s response passes altered response next extraction /validation functions, eventually return statement send_prompt (extractions validations succesful). validation function, hand, checks LLM’s response passes logical test. extraction validation functions can return feedback LLM. information, can prompt wrappers, see documentation prompt_wrap class creator function: create_prompt_wrap. examples prompt wrapper functions, see, instance documentation source code add_text, answer_as_integer, set_mode_chainofthought, add_tools.","code":"add_text <- function(prompt_wrap_or_list, text, sep = \"\\n\\n\") {   prompt_list <- validate_prompt_list(prompt_wrap_or_list)    new_wrap <- create_prompt_wrap(     modify_fn = function(original_prompt_text, modify_fn_args) {       text <- modify_fn_args$text       sep <- modify_fn_args$sep       return(paste(original_prompt_text, text, sep = sep))     },     modify_fn_args = list(text = text, sep = sep)   )    return(c(prompt_list, list(new_wrap))) } answer_as_integer <- function(     prompt_wrap_or_list, min = NULL, max = NULL, add_instruction_to_prompt = FALSE ) {   prompt_list <- validate_prompt_list(prompt_wrap_or_list)    new_wrap <- create_prompt_wrap(     modify_fn = function(original_prompt_text, modify_fn_args) {       min <- modify_fn_args$min       max <- modify_fn_args$max        new_prompt_text <- original_prompt_text        if (add_instruction_to_prompt) {         new_prompt_text <- glue::glue(           \"{new_prompt_text}            You must answer with only an integer (use no other characters).\"         )          if (!is.null(min) && !is.null(max)) {           new_prompt_text <- glue::glue(             \"{new_prompt_text}             Enter an integer between {min} and {max}.\"           )         } else if (!is.null(min)) {           new_prompt_text <- glue::glue(             \"{new_prompt_text}             Enter an integer greater than or equal to {min}.\"           )         } else if (!is.null(max)) {           new_prompt_text <- glue::glue(             \"{new_prompt_text}             Enter an integer less than or equal to {max}.\"           )         }       }        return(new_prompt_text)     },          extraction_functions = list(       function(x) {         extracted <- suppressWarnings(as.integer(x))         if (is.na(extracted)) {           return(create_llm_feedback(\"You must answer with only an integer (use no other characters).\"))         }         return(extracted)       }     ),          validation_functions = list(       function(x) {         if (!is.null(min) && x < min) {           return(create_llm_feedback(glue::glue(             \"The number should be greater than or equal to {min}.\"           )))         }         if (!is.null(max) && x > max) {           return(create_llm_feedback(glue::glue(             \"The number should be less than or equal to {max}.\"           )))         }          return(TRUE)       }     )   )    return(c(prompt_list, list(new_wrap))) }"},{"path":"https://lukakoning.github.io/tidyprompt/index.html","id":"more-information-and-contributing","dir":"","previous_headings":"","what":"More information and contributing","title":"Prompt and empower your LLM, the tidy way","text":"tidyprompt active development Luka Koning (l.koning@kennispunttwente.nl) Tjark van de Merwe (t.vandemerwe@kennispunttwente.nl). Note stage, package yet fully stable architecture subject change. encounter issues, please open issue GitHub repository. welcome contribute package opening pull request. questions suggestions, can also reach us via e-mail.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://lukakoning.github.io/tidyprompt/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://lukakoning.github.io/tidyprompt/reference/add_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Add text to a prompt — add_text","title":"Add text to a prompt — add_text","text":"Add text prompt appending prompt wrapper prompt list. text added end prompt text.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/add_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add text to a prompt — add_text","text":"","code":"add_text(prompt, text, position = c(\"after\", \"before\"), sep = \"\\n\\n\")"},{"path":"https://lukakoning.github.io/tidyprompt/reference/add_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add text to a prompt — add_text","text":"prompt single string, prompt_wrap object, list prompt_wrap objects. text Text added prompt. position add text; either \"\" \"\". sep Separator used original prompt text added text.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/add_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add text to a prompt — add_text","text":"prompt list added prompt wrapper object append text end prompt text.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/add_tools.html","id":null,"dir":"Reference","previous_headings":"","what":"Add function-calling to prompt — add_tools","title":"Add function-calling to prompt — add_tools","text":"Add function-calling prompt","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/add_tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add function-calling to prompt — add_tools","text":"","code":"add_tools(prompt, tool_functions = list())"},{"path":"https://lukakoning.github.io/tidyprompt/reference/add_tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add function-calling to prompt — add_tools","text":"prompt ... tool_functions ...","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/add_tools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add function-calling to prompt — add_tools","text":"...","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/answer_as_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Make LLM answer as an integer (between min and max) — answer_as_integer","title":"Make LLM answer as an integer (between min and max) — answer_as_integer","text":"Make LLM answer integer (min max)","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/answer_as_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make LLM answer as an integer (between min and max) — answer_as_integer","text":"","code":"answer_as_integer(   prompt,   min = NULL,   max = NULL,   add_instruction_to_prompt = TRUE )"},{"path":"https://lukakoning.github.io/tidyprompt/reference/answer_as_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make LLM answer as an integer (between min and max) — answer_as_integer","text":"prompt single string, prompt_wrap object, list prompt_wrap objects. min (optional) Minimum value integer max (optional) Maximum value integer add_instruction_to_prompt (optional) Add instruction replying integer prompt text. Set FALSE debugging extractions/validations working expected (without instruction answer fail validation function, initiating retry).","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/answer_as_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make LLM answer as an integer (between min and max) — answer_as_integer","text":"prompt list added prompt wrapper object ensure LLM response integer.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/answer_by_chain_of_thought.html","id":null,"dir":"Reference","previous_headings":"","what":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","title":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","text":"Set chain thought mode prompt","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/answer_by_chain_of_thought.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","text":"","code":"answer_by_chain_of_thought(prompt, extract_from_finish_brackets = TRUE)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/answer_by_chain_of_thought.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","text":"prompt prompt object single string extract_from_finish_brackets logical indicating whether final answer extracted text inside \"FINISH...\" brackets.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/answer_by_chain_of_thought.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set chain of thought mode for a prompt — answer_by_chain_of_thought","text":"prompt chain--thought mode added.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/construct_prompt_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct prompt text from a prompt object — construct_prompt_text","title":"Construct prompt text from a prompt object — construct_prompt_text","text":"Construct prompt text prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/construct_prompt_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct prompt text from a prompt object — construct_prompt_text","text":"","code":"construct_prompt_text(prompt)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/construct_prompt_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct prompt text from a prompt object — construct_prompt_text","text":"prompt prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/construct_prompt_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct prompt text from a prompt object — construct_prompt_text","text":"prompt text constructed prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_llm_feedback.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an llm feedback object — create_llm_feedback","title":"Create an llm feedback object — create_llm_feedback","text":"object used send feedback LLM LLM reply succesfully pass extractor validator function. extractor validator function return object feedback text sent LLM.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_llm_feedback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an llm feedback object — create_llm_feedback","text":"","code":"create_llm_feedback(text)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_llm_feedback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an llm feedback object — create_llm_feedback","text":"text character string containing feedback text. sent back LLM passing extractor validator function.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_llm_feedback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an llm feedback object — create_llm_feedback","text":"object class \"llm_feedback\" containing feedback text.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_llm_provider.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to assist in creating llm_provider objects — create_llm_provider","title":"Generic function to assist in creating llm_provider objects — create_llm_provider","text":"function can used create new llm_provider objects different implementations complete_chat function.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_llm_provider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to assist in creating llm_provider objects — create_llm_provider","text":"","code":"create_llm_provider(complete_chat_function, parameters = list())"},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_llm_provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to assist in creating llm_provider objects — create_llm_provider","text":"complete_chat_function Function called llm_provider complete chat. function take chat_history dataframe input (see ?validate_chat_history), return list 'role' 'content' next message (e.g., list(role = \"user\", content = \"Hello\")). llm_provider object wrap provided complete_chat_function validation chat_history, also turning single string valid chat_history dataframe. provided function thus need assume input valid chat_history dataframe. Parameters passed parameters argument may accessed complete_chat_function; may used , instance, store API key, name model use, settings. parameters named list parameters attached llm_provider object. parameters can used configure llm_provider. instance, can used store model's name, API key, endpoint. E.g., list(model = \"-llm-model\", api_key = \"-api-key\").","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_llm_provider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to assist in creating llm_provider objects — create_llm_provider","text":"new llm_provider object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_ollama_llm_provider.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new Ollama llm_provider instance — create_ollama_llm_provider","title":"Create a new Ollama llm_provider instance — create_ollama_llm_provider","text":"Create new Ollama llm_provider instance","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_ollama_llm_provider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new Ollama llm_provider instance — create_ollama_llm_provider","text":"","code":"create_ollama_llm_provider(   parameters = list(model = \"llama3.1:8b\", url = \"http://localhost:11434/api/chat\") )"},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_ollama_llm_provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new Ollama llm_provider instance — create_ollama_llm_provider","text":"parameters named list parameters. Currently following parameters required: model: name model use (e.g., \"llama3.1:8b\") url: URL Ollama API endpoint","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_ollama_llm_provider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new Ollama llm_provider instance — create_ollama_llm_provider","text":"new llm_provider object use Ollama API","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_openai_llm_provider.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new OpenAI llm_provider instance — create_openai_llm_provider","title":"Create a new OpenAI llm_provider instance — create_openai_llm_provider","text":"function creates new llm_provider interacts Open AI API","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_openai_llm_provider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new OpenAI llm_provider instance — create_openai_llm_provider","text":"","code":"create_openai_llm_provider(   parameters = list(model = \"gpt-4o-mini\", api_key = Sys.getenv(\"OPENAI_API_KEY\")) )"},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_openai_llm_provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new OpenAI llm_provider instance — create_openai_llm_provider","text":"parameters named list parameters. Currently following parameters required: model: name model use (e.g., \"gpt-4o-mini\") api_key: API key use authentication OpenAI API. project API key (user API key) sufficient permissions. recommended safely store API key environment variable.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/create_openai_llm_provider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new OpenAI llm_provider instance — create_openai_llm_provider","text":"new llm_provider object use OpenAI API","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/extract_doc_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a specific section from a function's docstring-like documentation block — extract_doc_section","title":"Extract a specific section from a function's docstring-like documentation block — extract_doc_section","text":"helper function extract_function_docs.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/extract_doc_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a specific section from a function's docstring-like documentation block — extract_doc_section","text":"","code":"extract_doc_section(doc_lines, section_keyword)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/extract_doc_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a specific section from a function's docstring-like documentation block — extract_doc_section","text":"doc_lines character vector lines function's documentation block section_keyword keyword search documentation block, e.g., '@param'","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/extract_doc_section.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a specific section from a function's docstring-like documentation block — extract_doc_section","text":"extracted section character string list","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/extract_function_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract docstring-documentation from a function — extract_function_docs","title":"Extract docstring-documentation from a function — extract_function_docs","text":"Extract docstring-documentation function","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/extract_function_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract docstring-documentation from a function — extract_function_docs","text":"","code":"extract_function_docs(func)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/extract_function_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract docstring-documentation from a function — extract_function_docs","text":"func function object internal, roxygen-like documentation, 'llm_tool::' tags: 'name', 'description', 'param', 'return', 'example' (e.g., llm_tool::name my_function_name). Note 'example' must one-line example function used R, converted LLM call function text (slightly different syntax).","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/extract_function_docs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract docstring-documentation from a function — extract_function_docs","text":"list following elements: name: name function description: description function parameters: named list parameters descriptions return_value: description return value example: example LLM call function","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_base_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get base prompt from prompt — get_base_prompt","title":"Get base prompt from prompt — get_base_prompt","text":"Get base prompt prompt","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_base_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get base prompt from prompt — get_base_prompt","text":"","code":"get_base_prompt(prompt)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_base_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get base prompt from prompt — get_base_prompt","text":"prompt prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_base_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get base prompt from prompt — get_base_prompt","text":"base prompt prompt","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_extractions_and_validations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get extractions and validations from a prompt — get_extractions_and_validations","title":"Get extractions and validations from a prompt — get_extractions_and_validations","text":"Get extractions validations prompt","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_extractions_and_validations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get extractions and validations from a prompt — get_extractions_and_validations","text":"","code":"get_extractions_and_validations(prompt)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_extractions_and_validations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get extractions and validations from a prompt — get_extractions_and_validations","text":"prompt prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_extractions_and_validations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get extractions and validations from a prompt — get_extractions_and_validations","text":"list two lists: extractions validations","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_prompt_wraps.html","id":null,"dir":"Reference","previous_headings":"","what":"Get prompt wraps from prompt — get_prompt_wraps","title":"Get prompt wraps from prompt — get_prompt_wraps","text":"Get prompt wraps prompt","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_prompt_wraps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get prompt wraps from prompt — get_prompt_wraps","text":"","code":"get_prompt_wraps(prompt)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_prompt_wraps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get prompt wraps from prompt — get_prompt_wraps","text":"prompt prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_prompt_wraps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get prompt wraps from prompt — get_prompt_wraps","text":"list prompt wraps prompt","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_prompt_wraps_ordered.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract only prompt wraps and reorder them in order of operations — get_prompt_wraps_ordered","title":"Extract only prompt wraps and reorder them in order of operations — get_prompt_wraps_ordered","text":"function extracts prompt wraps prompt object reorders . order operations follows: \"Unspecified\" \"Mode\" \"Tool\"","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_prompt_wraps_ordered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract only prompt wraps and reorder them in order of operations — get_prompt_wraps_ordered","text":"","code":"get_prompt_wraps_ordered(prompt)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_prompt_wraps_ordered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract only prompt wraps and reorder them in order of operations — get_prompt_wraps_ordered","text":"prompt prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/get_prompt_wraps_ordered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract only prompt wraps and reorder them in order of operations — get_prompt_wraps_ordered","text":"list prompt wraps prompt, reordered order operations","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to create a prompt object from a character string — prompt.character","title":"Method to create a prompt object from a character string — prompt.character","text":"Method create prompt object character string","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to create a prompt object from a character string — prompt.character","text":"","code":"# S3 method for class 'character' prompt(input)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to create a prompt object from a character string — prompt.character","text":"input Input create_prompt; base prompt","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to create a prompt object from a character string — prompt.character","text":"prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method to create a prompt object — prompt.default","title":"Default method to create a prompt object — prompt.default","text":"called input character string prompt object.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method to create a prompt object — prompt.default","text":"","code":"# Default S3 method prompt(input)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method to create a prompt object — prompt.default","text":"input Input create_prompt","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default method to create a prompt object — prompt.default","text":"error message stating input type suitable","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods to create and manipulate prompt objects — prompt","title":"Methods to create and manipulate prompt objects — prompt","text":"Methods create manipulate prompt objects","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods to create and manipulate prompt objects — prompt","text":"","code":"prompt(input)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods to create and manipulate prompt objects — prompt","text":"input Input prompt. character string passed, new prompt object created character string base prompt.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods to create and manipulate prompt objects — prompt","text":"prompt object (error unsuitable input provided)","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to validate a prompt object — prompt.prompt","title":"Method to validate a prompt object — prompt.prompt","text":"Method validate prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to validate a prompt object — prompt.prompt","text":"","code":"# S3 method for class 'prompt' prompt(input)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to validate a prompt object — prompt.prompt","text":"input prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt.prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to validate a prompt object — prompt.prompt","text":"validated prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for prompt_wrap — prompt_wrap.default","title":"Default method for prompt_wrap — prompt_wrap.default","text":"Attempts create prompt object whatever passed 'prompt'; calls internal function append prompt wrap.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for prompt_wrap — prompt_wrap.default","text":"","code":"# Default S3 method prompt_wrap(prompt, ...)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for prompt_wrap — prompt_wrap.default","text":"prompt Input prompt object ... Additional arguments","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default method for prompt_wrap — prompt_wrap.default","text":"prompt object new prompt wrap appended .","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a prompt with additional functionality — prompt_wrap","title":"Wrap a prompt with additional functionality — prompt_wrap","text":"Wrap prompt additional functionality","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap a prompt with additional functionality — prompt_wrap","text":"","code":"prompt_wrap(   prompt,   modify_fn = NULL,   extraction_fn = NULL,   validation_fn = NULL,   max_retries = 10,   type = c(\"unspecified\", \"mode\", \"tool\") )"},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap a prompt with additional functionality — prompt_wrap","text":"prompt prompt object single string modify_fn function takes previous prompt text returns new prompt text extraction_fn function takes LLM response attempts extract value . Upon succesful extraction, function return extracted value. extraction fails, function return feedback message sent back LLM (feedback message class 'llm_feedback'). validation_fn function takes (extracted) LLM response attempts validate . Upon succesful validation, function return TRUE. validation fails, function return feedback message sent back LLM (feedback message class 'llm_feedback').#' max_retries maximum number retries allowed prompt wrap; failure extraction validation count retry. type type prompt wrap; one 'unspecified', 'mode', 'tool'. Types used determine order prompt wraps applied. Typically, tools applied first, modes, unspecified wraps.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap a prompt with additional functionality — prompt_wrap","text":"prompt object new prompt wrap appended .","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"prompt_wrap method for when a prompt object is supplied — prompt_wrap.prompt","title":"prompt_wrap method for when a prompt object is supplied — prompt_wrap.prompt","text":"Calls internal function append prompt wrap.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prompt_wrap method for when a prompt object is supplied — prompt_wrap.prompt","text":"","code":"# S3 method for class 'prompt' prompt_wrap(prompt, ...)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prompt_wrap method for when a prompt object is supplied — prompt_wrap.prompt","text":"prompt prompt object ... Additional arguments","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap.prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prompt_wrap method for when a prompt object is supplied — prompt_wrap.prompt","text":"prompt object new prompt wrap appended .","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to append a prompt wrap to a prompt object — prompt_wrap_internal","title":"Internal function to append a prompt wrap to a prompt object — prompt_wrap_internal","text":"Internal function append prompt wrap prompt object","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to append a prompt wrap to a prompt object — prompt_wrap_internal","text":"","code":"prompt_wrap_internal(   prompt,   modify_fn = NULL,   extraction_fn = NULL,   validation_fn = NULL,   max_retries = 10,   type = c(\"unspecified\", \"mode\", \"tool\") )"},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap_internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to append a prompt wrap to a prompt object — prompt_wrap_internal","text":"prompt See prompt_wrap modify_fn See prompt_wrap extraction_fn See prompt_wrap validation_fn See prompt_wrap max_retries See prompt_wrap type See prompt_wrap","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/prompt_wrap_internal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to append a prompt wrap to a prompt object — prompt_wrap_internal","text":"prompt object new prompt wrap appended .","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/send_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Send a prompt to a LLM provider — send_prompt","title":"Send a prompt to a LLM provider — send_prompt","text":"Send prompt LLM provider","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/send_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send a prompt to a LLM provider — send_prompt","text":"","code":"send_prompt(   prompt,   llm_provider,   verbose = getOption(\"tidyprompt.verbose\", FALSE),   extract_validate_mode = c(\"extraction_then_validation\", \"wrap_by_wrap\") )"},{"path":"https://lukakoning.github.io/tidyprompt/reference/send_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send a prompt to a LLM provider — send_prompt","text":"prompt prompt object single string llm_provider 'llm_provider' object verbose interaction LLM provider printed extract_validate_mode ...","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/send_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send a prompt to a LLM provider — send_prompt","text":"...","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/set_system_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Set system prompt — set_system_prompt","title":"Set system prompt — set_system_prompt","text":"Set system prompt prompt","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/set_system_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set system prompt — set_system_prompt","text":"","code":"set_system_prompt(prompt, system_prompt)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/set_system_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set system prompt — set_system_prompt","text":"prompt prompt object system_prompt single character string representing system prompt","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/set_system_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set system prompt — set_system_prompt","text":"prompt object system prompt set","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/tidyprompt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyprompt: Prompt and empower your LLM, the tidy way — tidyprompt-package","title":"tidyprompt: Prompt and empower your LLM, the tidy way — tidyprompt-package","text":"'tidyprompt' package allows users prompt empower large language models (LLMs) tidy way. provides framework construct LLM prompts using 'tidyverse'-inspired piping syntax, library pre-built prompt wrappers option build custom ones. Additionally, supports structured LLM output extraction validation, automatic feedback retries necessary. Moreover, enables specific LLM reasoning modes, autonomous R function calling LLMs, compatibility LLM provider.","code":""},{"path":[]},{"path":"https://lukakoning.github.io/tidyprompt/reference/tidyprompt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidyprompt: Prompt and empower your LLM, the tidy way — tidyprompt-package","text":"Maintainer: Luka Koning l.koning@kennispunttwente.nl [copyright holder] Authors: Tjark Van de Merwe t.vandemerwe@kennispunttwente.nl [copyright holder]","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/validate_chat_history.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate chat history — validate_chat_history","title":"Validate chat history — validate_chat_history","text":"function validates chat history, ensuring dataframe matches expected format. single message provided character string, turned valid chat history dataframe.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/validate_chat_history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate chat history — validate_chat_history","text":"","code":"validate_chat_history(chat_history, last_message_from_user = FALSE)"},{"path":"https://lukakoning.github.io/tidyprompt/reference/validate_chat_history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate chat history — validate_chat_history","text":"chat_history dataframe 'role' 'content' columns, 'role' role message ('user' 'assistant') 'content' content message. last_message_from_user logical indicating whether last message user. Default FALSE. Alternatively, can provide single message character string.","code":""},{"path":"https://lukakoning.github.io/tidyprompt/reference/validate_chat_history.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate chat history — validate_chat_history","text":"valid, input object returned (invisibly). single message provided, turned valid chat_history dataframe (also returned invisibly). valid, error thrown nothing returned.","code":""}]
